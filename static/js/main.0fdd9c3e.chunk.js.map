{"version":3,"sources":["Sidebar.js","DisabledSideBar.js","Algorithms/BubbleSort.js","Algorithms/SelectionSort.js","Algorithms/InsertionSort.js","Algorithms/QuickSort.js","Visualizer/Visualizer.js","App.js","serviceWorker.js","index.js"],"names":["BubbleSortModal","props","Modal","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","Footer","Button","onClick","onHide","SelectionSortModal","QuickSortModal","InsertionSortModal","Sidebar","React","useState","BubbleModal","setBubbleModal","SelectionModal","setSelectionModal","InsertionModal","setInsertionModal","QuickModal","setQuickModal","className","resetArray","bubbleSort","aria-hidden","selectionSort","insertionSort","quickSort","show","DisabledSideBar","disabled","window","location","reload","array","animations","n","length","i","j","push","swap","temp","smallest","InsertionSort","key","k","newArray","start","end","pivot","partition","firstIndex","secondIndex","Visualizer","setArray","isSorting","setSorting","useEffect","randomInt","min","max","Math","floor","random","slice","getBubbleSort","changeColor","barsClass","document","getElementsByClassName","barColor","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","barIdx","newHeight","barStyle","height","getSelectionSort","getInsertionSort","getQuickSort","console","log","map","value","index","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0fdd9c3e.chunk.js","sourcesContent":["import React from 'react'\nimport './styles/Sidebar.css'\nimport { Button, Modal } from 'react-bootstrap'\n\nfunction BubbleSortModal(props) {\n  return (\n    <Modal\n      {...props}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Bubble Sort\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <p>\n          Bubble sort is a simple comparison-based sorting algorithm \n          that compares adjacent elements and swaps \n          them if they are in the wrong order.\n        </p>\n        <p>\n          Bubble sort is reasonable for sorting small-sized arrays\n          and is not suitable for large data sets.\n        </p>\n        <h4> Time Complexities: </h4>\n        <ul>  \n          <li>Worst Case Complexity: O(n&sup2;)</li>\n          <li>Best Case Complexity: O(n)</li>\n          <li>Average Case Complexity: O(n&sup2;)</li>\n        </ul>\n\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={props.onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nfunction SelectionSortModal(props) {\n  return (\n    <Modal\n      {...props}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Seelection Sort\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <p>\n          Selection Sort is one of the simplest sorting algorithms\n          which selects the smallest element from an array in each iteration\n          , and swaps it into sorted position.\n\n        </p>\n        <p>\n          This algorithm is not suitable for large data sets as its average \n          and worst case complexities are of Ο(n&sup2;),\n        </p>\n        <h4> Time Complexities: </h4>\n        <ul>  \n          <li>Worst Case Complexity: O(n&sup2;)</li>\n          <li>Best Case Complexity: O(n&sup2;)</li>\n          <li>Average Case Complexity: O(n&sup2;)</li>\n        </ul>\n\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={props.onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nfunction QuickSortModal(props) {\n  return (\n    <Modal\n      {...props}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Quick Sort\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <p>\n          Quicksort is a divide-and-conquer algorithm. \n          It works by selecting a 'pivot' element from the array \n          and partitioning the other elements into two sub-arrays, \n          according to whether they are less than or greater than the pivot. \n          The sub-arrays are then sorted recursively.\n\n        </p>\n        <p>\n          This algorithm is quite efficient for large-sized data sets as its average and \n          worst-case complexity are O(nLogn) and Ο(n&sup2;), respectively.\n        </p>\n        <h4> Time Complexities: </h4>\n        <ul>  \n          <li>Worst Case Complexity: O(n&sup2;)</li>\n          <li>Best Case Complexity: O(nLogn)</li>\n          <li>Average Case Complexity: O(nLogn;)</li>\n        </ul>\n\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={props.onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nfunction InsertionSortModal(props) {\n  return (\n    <Modal\n      {...props}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Insertion Sort\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <p>\n          Insertion sort is a sorting algorithm that places an unsorted element at its \n          suitable place in each iteration, similar to the way we sort playing cards in our hands.\n\n        </p>\n        <p>\n          This algorithm is not suitable for large data sets as its average \n          and worst case complexities are of Ο(n&sup2;),\n        </p>\n        <h4> Time Complexities: </h4>\n        <ul>  \n          <li>Worst Case Complexity: O(n&sup2;)</li>\n          <li>Best Case Complexity: O(n&sup2;)</li>\n          <li>Average Case Complexity: O(n&sup2;)</li>\n        </ul>\n\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={props.onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\n\n\nconst Sidebar = (props) =>{\n\tconst [BubbleModal, setBubbleModal] = React.useState(false);\n  const [SelectionModal, setSelectionModal] = React.useState(false);\n  const [InsertionModal, setInsertionModal] = React.useState(false);\n  const [QuickModal, setQuickModal] = React.useState(false);\n\n\treturn(\n\t\t<div className='sidebar'>\n\t\t\t<button onClick={props.resetArray} className='sidebar_items'>New Array</button> <br />\n\t\t\t<p>\n        <button onClick = {props.bubbleSort} className='sidebar_items'>Bubble Sort\n        </button>\n\n        <i onClick={() => setBubbleModal(true)} className=\"fa fa-question-circle\" aria-hidden=\"true\"></i>\n      </p>\n      <p>\n        <button onClick = {props.selectionSort} className='sidebar_items'>Selection Sort</button>\n\n        <i onClick={() => setSelectionModal(true)} className=\"fa fa-question-circle\" aria-hidden=\"true\"></i>\n      </p>\n      <p>\n        <button onClick = {props.insertionSort} className='sidebar_items'>Insertion Sort</button>\n\n        <i onClick={() => setInsertionModal(true)} className=\"fa fa-question-circle\" aria-hidden=\"true\"></i>\n      </p>\n      <p>\n        <button onClick = {props.quickSort} className='sidebar_items'>Quick Sort</button>\n\n        <i onClick={() => setQuickModal(true)} className=\"fa fa-question-circle\" aria-hidden=\"true\"></i>\n      </p>\n\t\t\t\n\t\t\t\n\t\t\t\n\n      <BubbleSortModal\n        show={BubbleModal}\n        onHide={() => setBubbleModal(false)}\n      />\n      <SelectionSortModal\n        show={SelectionModal}\n        onHide={() => setSelectionModal(false)}\n      />\n      <InsertionSortModal\n        show={InsertionModal}\n        onHide={() => setInsertionModal(false)}\n      />\n      \n      <QuickSortModal\n        show={QuickModal}\n        onHide={() => setQuickModal(false)}\n      />\n\t\t</div>\n\t)\n\t\n}\nexport default Sidebar","import React from 'react'\nimport './styles/Sidebar.css'\n\nconst DisabledSideBar = () =>{\n\treturn(\n\t\t<div className='sidebar'>\n\t\t\t<button disabled className='sidebar_items'>New Array</button>\n\t\t\t<button disabled  className='sidebar_items'>Bubble Sort</button>\n\t\t\t<button disabled className='sidebar_items'>Selection Sort</button>\n\t\t\t<button disabled className='sidebar_items'>Insertion Sort</button>\n\t\t\t<button disabled className='sidebar_items'>Quick Sort</button>\n\t\t\t<br />\n\t\t\t<button onClick={() => window.location.reload(false)} className='sidebar_items reset'>Reset</button>\n\n\t\t</div>\n\t)\n\t\n}\nexport default DisabledSideBar","export const getBubbleSort = (array) =>{\n\tlet animations = []\n\tconst newArray = array.slice()\n\tbubbleSort(newArray, animations)\n\t//testing sorted aray against jsSort\n\t//console.log(testResult(newArray,array))\n\treturn [newArray, animations]\n}\n\nconst bubbleSort = (array, animations) =>{\n\tconst n = array.length\n\tfor (let i=0; i<n-1; i++){\n\t\tfor (let j=0; j<n-i-1; j++){\n\t\t\tanimations.push([j, j+1])\n\t\t\tanimations.push([j, j+1])\n\n\t\t\tif (array[j] > array[j+1]){\n\t\t\t\tanimations.push([j, array[j+1]])\n\t\t\t\tanimations.push([j+1, array[j]])\n\t\t\t\tswap(array, j, j+1)\n\t\t\t}\n\t\t\t\t\n\t\t\telse{\n\t\t\t\tanimations.push([-1, -1])\n\t\t\t\tanimations.push([-1, -1])\n\t\t\t}\n\t\t\t\t\n\t    }\n    }\n\treturn array\n}\n\nconst swap =(array, i, j) =>{\n\tlet temp = array[i]\n\tarray[i] = array[j]\n\tarray[j] = temp\n}\n\nconst testResult = (sortedArray, unSortedArray) =>{\n\tconst jsSortedArray = unSortedArray.slice().sort((a, b) => a - b);\n\t//console.log( sortedArray.length, jsSortedArray.length)\n\tif (sortedArray.length !== jsSortedArray.length) return false\n\tfor (let i=0; i< sortedArray.length; i++){\n\t\tif (sortedArray[i] !== jsSortedArray[i]){\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}","export const getSelectionSort = (array) =>{\n\tlet animations =[]\n\tconst newArray = array.slice()\n\tselectionSort(newArray, animations)\n\t// testing sorted array against jsSort\n\t//console.log(testResult(newArray, array))\n\treturn [newArray, animations]\n}\n\nconst selectionSort = (array, animations) =>{\n\tconst n = array.length\n\tfor (let i=0; i<n; i++){\n\t\tlet smallest = i\n\t\tfor (let j=i+1; j<n; j++){\n\t\t\tanimations.push([j, smallest])\n\t\t\tanimations.push([j, smallest])\n\t\t\tif (array[j] < array[smallest]){\n\t\t\t\tanimations.push([smallest, array[j]])\n\t\t\t\tanimations.push([j, array[smallest]])\n\t\t\t\t\n\t\t\t\tswap(array,j, smallest)\n\t\t\t}\n\t\t\telse{\n\t\t\t\tanimations.push([-1, -1])\n\t\t\t\tanimations.push([-1, -1])\n\t\t\t}\n\t\t}\n\t}\n\treturn array\n}\n\nconst swap =(array, i, j) =>{\n\tlet temp = array[i]\n\tarray[i] = array[j]\n\tarray[j] = temp\n}\n\nconst testResult = (sortedArray, unSortedArray) =>{\n\tconst jsSortedArray = unSortedArray.slice().sort((a, b) => a - b);\n\tif (sortedArray.length !== jsSortedArray.length) return false\n\tfor (let i=0; i< sortedArray.length; i++){\n\t\tif (sortedArray[i] !== jsSortedArray[i]){\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}","export const getInsertionSort = array => {\n    let animations = []\n    const newArray = array.slice()\n    InsertionSort(newArray, animations)\n    //console.log(testResult(newArray,array))\n    return [ newArray ,animations]\n\n}\n\nconst InsertionSort = (array, animations) => {\n    let n = array.length\n    for (let i =1; i<n; i++){\n        let key = array[i]\n        let j = i-1\n        let k = i\n        animations.push(['comparisionOne', i,j])\n        animations.push(['comparisionTwo', i,j])\n        while(j>=0 && array[j]>key){\n            animations.push(['change', j+1, array[j]])\n            animations.push(['change', j, array[j+1]])\n            let temp = array[j+1]\n            array[j+1]=array[j]\n            array[j] = temp\n            j = j-1\n            k = k-1\n            if (j >= 0){\n                animations.push(['comparisionOne', k,j])\n                animations.push(['comparisionTwo', k,j])\n            }\n        }\n    }\n    return array\n       \n}\n\nconst testResult = (sortedArray, unSortedArray) =>{\n    const jsSortedArray = unSortedArray.slice().sort((a, b) => a - b);\n    //console.log( sortedArray.length, jsSortedArray.length)\n    if (sortedArray.length !== jsSortedArray.length) return false\n    for (let i=0; i< sortedArray.length; i++){\n        if (sortedArray[i] !== jsSortedArray[i]){\n            return false\n        }\n    }\n    return true\n}","export const getQuickSort = array => {\n    let animations = []\n    let newArray = array.slice()\n    quickSort(newArray, 0, newArray.length-1, animations)\n    //console.log(testResult(newArray,array))\n    return [ newArray ,animations]\n\n}\n\nconst quickSort = (newArray, start, end, animations) => {\n  if(start < end) {\n   let pivot = partition(newArray, start, end, animations)\n\n   quickSort(newArray, start, pivot - 1, animations)\n   quickSort(newArray, pivot + 1, end, animations)\n  } \n}\n\nconst partition = (newArray, start, end, animations) => { \n  let pivot = end\n  let i = start - 1,\n      j = start\n\n  while (j < pivot) {\n    animations.push(['comparisionOne', j,pivot])\n    animations.push(['comparisionTwo', j,pivot])\n\n    if (newArray[j] > newArray[pivot]) {\n      j++\n    }\n\n    else {\n      i++\n      // animations.push(['comparisionOne', j,pivot])\n      // animations.push(['comparisionTwo', j,pivot])\n      animations.push(['comparisionOne', j,i])\n      animations.push(['change', i, newArray[j]])\n      animations.push(['change', j, newArray[i]])\n      animations.push(['comparisionTwo', j,i])\n      swap(newArray, j, i)\n      j++\n    }\n  }\n\n  animations.push(['comparisionOne', i+1,pivot])\n  animations.push(['change', i+1, newArray[pivot]])\n  animations.push(['change', pivot, newArray[i+1]])\n  animations.push(['comparisionTwo', i+1,pivot])\n  swap(newArray, i + 1, pivot)\n\n  return i + 1\n}\n\nconst swap = (newArray, firstIndex, secondIndex) => {\n  let temp = newArray[firstIndex]\n  newArray[firstIndex] = newArray[secondIndex];\n  newArray[secondIndex] = temp\n}\n\nconst testResult = (sortedArray, unSortedArray) =>{\n  // console.log(sortedArray)\n    const jsSortedArray = unSortedArray.slice().sort((a, b) => a - b);\n    //console.log( sortedArray.length, jsSortedArray.length)\n    if (sortedArray.length !== jsSortedArray.length) return false\n    for (let i=0; i< sortedArray.length; i++){\n        if (sortedArray[i] !== jsSortedArray[i]){\n            return false\n        }\n    }\n    return true\n}","import React, { useState, useEffect } from 'react'\nimport '../styles/Visualizer.css'\nimport Sidebar from '../Sidebar'\nimport DisabledSideBar from '../DisabledSideBar'\nimport {getBubbleSort} from '../Algorithms/BubbleSort'\nimport {getSelectionSort} from '../Algorithms/SelectionSort'\nimport {getInsertionSort} from '../Algorithms/InsertionSort'\nimport {getQuickSort} from '../Algorithms/QuickSort'\n\nconst Visualizer = () =>{\n\tconst [array, setArray] = useState([])\n\tconst [isSorting, setSorting ] = useState(false)\n\n\tuseEffect(() =>{\n\t\tresetArray()\n\t}, [])\n\n\tconst resetArray = () =>{\n\t\tlet array =[]\n\t\tfor(let i=0; i<20; i++){\n\t\t\tarray.push(randomInt(5,380))\n\t\t}\n\t\tsetArray(array)\n\t\t// for testing small arrays\n\t\t//setArray([60,20,50,10,80])\n\t\tsetSorting(false)\n\t}\n\n\tconst randomInt = (min, max) =>{\n\t\treturn Math.floor(Math.random() * (max-min+1) + min)\n\t}\n\n\tconst bubbleSort = () =>{\n\t\tsetSorting(true)\n\t\tconst [newArray, animations] = getBubbleSort(array)\n\t\tfor (let i=0; i<animations.length; i++){\n\t\t\t\n\t\t\tconst changeColor = i % 4 === 0 || i % 4 === 1\n\t\t\tconst barsClass = document.getElementsByClassName('bar')\n\n\t\t\tif (changeColor){\n\t\t\t\tconst barColor = (i % 4 === 0 )? 'red' : 'turquoise'\n\t\t\t\tconst [barOneIdx, barTwoIdx] = animations[i]\n\t\t\t\tconst barOneStyle = barsClass[barOneIdx].style\n\t\t\t\tconst barTwoStyle = barsClass[barTwoIdx].style\n\t\t\t\tsetTimeout(() =>{\n\t\t\t\t\tbarOneStyle.backgroundColor = barColor\n\t\t\t\t\tbarTwoStyle.backgroundColor = barColor\n\t\t\t\t}, i * 200)\n\t\t\t}\n\t\t\telse{\n\t\t\t\tconst [barIdx, newHeight] = animations[i]\n\t\t\t\tif (barIdx === -1){\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tconst barStyle = barsClass[barIdx].style\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tbarStyle.height = `${newHeight}px`\n\n\t\t\t\t},i*200)\n\t\t\t\t\t\n\t\t\t}\n\t\t\t//to disable sidebar when sorting. Need better solution fot this!\n\t\t\tsetTimeout(()=>{\n\t\t\t\tsetSorting(false)\n\t\t\t\tsetArray(newArray)\n\t\t\t}, animations.length*200)\n\t\t\t\n\t\t}\n\n\t}\n\n\tconst selectionSort = () =>{\n\t\tsetSorting(true)\n\t\tconst [newArray, animations] = getSelectionSort(array)\n\n\t\tfor (let i=0; i<animations.length; i++){\n\t\t\tconst changeColor = i % 4 === 0 || i % 4 === 1\n\t\t\tconst barsClass = document.getElementsByClassName('bar')\n\n\n\t\t\tif (changeColor){\n\t\t\t\tconst barColor = (i % 4 === 0 )? 'red' : 'turquoise'\n\t\t\t\tconst [barOneIdx, barTwoIdx] = animations[i]\n\t\t\t\tconst barOneStyle = barsClass[barOneIdx].style\n\t\t\t\tconst barTwoStyle = barsClass[barTwoIdx].style\n\t\t\t\tsetTimeout(() =>{\n\t\t\t\t\tbarOneStyle.backgroundColor = barColor\n\t\t\t\t\tbarTwoStyle.backgroundColor = barColor\n\t\t\t\t}, i * 200)\n\t\t\t}\n\t\t\telse{\n\t\t\t\tconst [barIdx, newHeight] = animations[i]\n\t\t\t\tif (barIdx === -1){\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tconst barStyle = barsClass[barIdx].style\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tbarStyle.height = `${newHeight}px`\n\n\t\t\t\t},i*200)\n\t\t\t\t\t\n\t\t\t}\n\t\t\t//to disable sidebar when sorting. Need better solution fot this!\n\t\t\tsetTimeout(()=>{\n\t\t\t\tsetSorting(false)\n\t\t\t\tsetArray(newArray)\n\t\t\t}, animations.length*200)\n\n\t\t}\n\t}\n\n\tconst insertionSort = () =>{\n\t\tsetSorting(true)\n\t\tconst [newArray, animations] = getInsertionSort(array)\n\t\t\n\t\tfor (let i=0; i<animations.length; i++){\n\t\t\tconst changeColor = animations[i][0]==='comparisionOne' || animations[i][0]==='comparisionTwo' \n\t\t\tconst barsClass = document.getElementsByClassName('bar')\n\n\n\t\t\tif (changeColor){\n\t\t\t\tconst barColor = animations[i][0]==='comparisionOne'? 'red' : 'turquoise'\n\t\t\t\tconst [temp, barOneIdx, barTwoIdx] = animations[i]\n\t\t\t\tconst barOneStyle = barsClass[barOneIdx].style\n\t\t\t\tconst barTwoStyle = barsClass[barTwoIdx].style\n\t\t\t\tsetTimeout(() =>{\n\t\t\t\t\tbarOneStyle.backgroundColor = barColor\n\t\t\t\t\tbarTwoStyle.backgroundColor = barColor\n\t\t\t\t}, i * 400)\n\t\t\t}\n\t\t\telse{\n\t\t\t\tconst [temp, barIdx, newHeight] = animations[i]\n\t\t\t\t\n\t\t\t\tconst barStyle = barsClass[barIdx].style\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tbarStyle.height = `${newHeight}px`\n\n\t\t\t\t},i*400)\n\t\t\t\t\t\n\t\t \t}\n\t\t\t//to disable sidebar when sorting. Need better solution fot this!\n\t\t\tsetTimeout(()=>{\n\t\t\t\tsetSorting(false)\n\t\t\t\tsetArray(newArray)\n\t\t\t}, animations.length*2*200)\n\n\t\t }\n\t}\n\n\tconst quickSort = () =>{\n\t\tsetSorting(true)\n\t\tconst [newArray, animations] = getQuickSort(array)\n\n\t\tfor (let i=0; i<animations.length; i++){\n\t\t\tconst changeColor = animations[i][0]==='comparisionOne' || animations[i][0]==='comparisionTwo' \n\t\t\tconst barsClass = document.getElementsByClassName('bar')\n\n\n\t\t\tif (changeColor){\n\t\t\t\tconst barColor = animations[i][0]==='comparisionOne'? 'red' : 'turquoise'\n\t\t\t\tconst [temp, barOneIdx, barTwoIdx] = animations[i]\n\t\t\t\tconst barOneStyle = barsClass[barOneIdx].style\n\t\t\t\tconst barTwoStyle = barsClass[barTwoIdx].style\n\t\t\t\tsetTimeout(() =>{\n\t\t\t\t\tbarOneStyle.backgroundColor = barColor\n\t\t\t\t\tbarTwoStyle.backgroundColor = barColor\n\t\t\t\t}, i * 400)\n\t\t\t}\n\t\t\telse{\n\t\t\t\tconst [temp, barIdx, newHeight] = animations[i]\n\t\t\t\tconsole.log(barIdx)\n\t\t\t\t\n\t\t\t\tconst barStyle = barsClass[barIdx].style\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tbarStyle.height = `${newHeight}px`\n\n\t\t\t\t},i*400)\n\t\t\t\t\t\n\t\t \t}\n\t\t\t//to disable sidebar when sorting. Need better solution fot this!\n\t\t\tsetTimeout(()=>{\n\t\t\t\tsetSorting(false)\n\t\t\t\tsetArray(newArray)\n\t\t\t}, animations.length*2*200)\n\n\t\t }\n\t}\n\n\n\tconst getSideBar = () =>{\n\t\tlet sidebar = ''\n\t\tif (isSorting){\n\t\t\tsidebar = <DisabledSideBar \n\t\t\t\t\t\t/>\n\t\t}\n\t\telse{\n\t\t\tsidebar = <Sidebar \n\t\t\t\t\t\t\tresetArray = {resetArray}\n\t\t\t\t\t\t\tbubbleSort = {bubbleSort}\n\t\t\t\t\t\t\tselectionSort = {selectionSort}\n\t\t\t\t\t\t\tinsertionSort = {insertionSort}\n\t\t\t\t\t\t\tquickSort = {quickSort}\n\t\t\t\t\t\t/>\n\t\t}\n\t\treturn sidebar\n\t}\n\n\treturn(\n\t\t<>\n\t\t\n\t\t{getSideBar()}\n\t\t<div className='bars-div'>\n\t\t\t{array.map((value, index) => (\n\t\t        <div \n\t\t        \tclassName='bar' \n\t\t        \tkey={index} \n\t\t        \tstyle={{height: `${value}px`}}>\n\t\t        </div>\n\t\t  \t ))}\n\n\t\t</div>\n\t\t</>\n\t)\n}\nexport default Visualizer","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Visualizer from './Visualizer/Visualizer'\n\nfunction App() {\n  return (\n  \t<div className='main'>\n  \t\t<div className='content'>\n  \t\t\t<Visualizer />\n  \t\t</div>\n  \t</div>\n    \n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}